version: '3.9'

services:
  traefik:
    container_name: sample-app-traefik
    image: traefik:v2.9.1
    restart: unless-stopped
    command:
      - "--log.level=DEBUG"
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.hotreload.address=:10000'
    ports:
      - '80:80'
      - '8080:8080'
      - '10000:10000'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
    networks:
      - sample-app-network

  rabbitmq:
    container_name: sample-app-rabbitmq
    image: bitnami/rabbitmq:3.8.14
    restart: unless-stopped
    environment:
      - RABBITMQ_VHOST=$RABBITMQ_VHOST
      - RABBITMQ_USERNAME=$RABBITMQ_USERNAME
      - RABBITMQ_PASSWORD=$RABBITMQ_PASSWORD
      - RABBITMQ_PLUGINS=rabbitmq_prometheus,rabbitmq_management
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:15672' ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - rabbitmq-storage:/bitnami
    ports:
      - '15672:15672'
      - '15692:15692'
      - '5672:5672'
    networks:
      - sample-app-network

  redis:
    container_name: sample-app-redis
    image: redis:6.2-alpine
    restart: unless-stopped
    volumes:
      - redis-storage:/data
    ports:
      - '6379:6379'
    networks:
      - sample-app-network

  redis-commander:
    container_name: sample-app-redis-commander
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:sample-app-redis:6379
    ports:
      - '8085:8081'
    depends_on:
      - redis
    networks:
      - sample-app-network

  mongo:
    container_name: sample-app-mongo
    image: bitnami/mongodb:6.0.3
    restart: unless-stopped
    environment:
      MONGODB_ROOT_USER: $MONGO_ROOT_USERNAME
      MONGODB_ROOT_PASSWORD: $MONGO_ROOT_PASSWORD
    volumes:
      - mongo-storage:/bitnami/mongodb
    ports:
      - '27017:27017'
    networks:
      - sample-app-network

  mysql:
    container_name: sample-app-mysql
    image: mysql:5.7.40
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
      - MYSQL_PASSWORD=$MYSQL_PASSWORD
      - MYSQL_USER=$MYSQL_USER
      - MYSQL_DATABASE=sample-app
    volumes:
      - mysql-storage:/var/lib/mysql
    ports:
      - '3306:3306'
    networks:
      - sample-app-network

  prometheus:
    container_name: sample-app-prometheus
    image: prom/prometheus:v2.40.6
    restart: unless-stopped
    volumes:
      - prometheus-storage:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
    networks:
      - sample-app-network
    depends_on:
      [ redis, mongodb-exporter, mysqld-exporter ]

  grafana:
    container_name: sample-app-grafana
    image: grafana/grafana:9.3.1
    restart: unless-stopped
    links:
      - prometheus:prometheus
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=$GRAFANA_ADMIN_PASSWORD
    ports:
      - '9091:3000'
    networks:
      - sample-app-network
    depends_on:
      [ redis, prometheus, mongodb-exporter, mysqld-exporter ]

  mongodb-exporter:
    container_name: sample-app-mongodb-exporter
    image: percona/mongodb_exporter:0.30.0
    restart: unless-stopped
    volumes:
      - mongodb-exporter-storage:/data/db
    environment:
      - MONGODB_URI=$MONGO_EXPORTER_MONGODB_URI
    command:
      - '--compatible-mode'
      - '--discovering-mode'
    ports:
      - '9216:9216'
    networks:
      - sample-app-network
    depends_on:
      - mongo

  mysqld-exporter:
    container_name: sample-app-mysqld-exporter
    image: prom/mysqld-exporter:v0.12.1
    restart: unless-stopped
    command:
      - '--collect.info_schema.tablestats'
    environment:
      - DATA_SOURCE_NAME=$MYSQL_EXPORTER_DATA_SOURCE
    ports:
      - '9104:9104'
    links:
      - mysql
    networks:
      - sample-app-network
    depends_on:
      - mysql

  sample-fe:
    container_name: sample-fe
    image: sample-fe
    restart: unless-stopped
    build:
      context: ./sample-fe
    ports:
      - '40080:80'
    networks:
      - sample-app-network

  sample-api:
    container_name: sample-api
    image: sample-api
    restart: unless-stopped
    build:
      context: ./sample-api
    ports:
      - '3000:3000'
    networks:
      - sample-app-network

volumes:
  mongo-storage:
    name: sample-app-mongo
    driver: local
  mysql-storage:
    name: sample-app-mysql
    driver: local
  rabbitmq-storage:
    name: sample-app-rabbitmq
    driver: local
  redis-storage:
    name: sample-app-redis
    driver: local
  prometheus-storage:
    name: sample-app-prometheus
    driver: local
  grafana-storage:
    name: sample-app-grafana
    driver: local
  mongodb-exporter-storage:
    name: sample-app-mongodb-exporter
    driver: local

networks:
  sample-app-network:
    name: sample-app-network
    driver: bridge
